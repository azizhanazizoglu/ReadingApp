@startuml
title ReadingApp: TsX Master (State Machine)

skinparam defaultFontName "Segoe UI"
skinparam state {
  BackgroundColor White
  BorderColor #94a3b8
  FontSize 12
}

skinparam state {
  BackgroundColor<<capture>> #dbeafe
  BorderColor<<capture>> #2563eb
  BackgroundColor<<analyze>> #ccfbf1
  BorderColor<<analyze>> #14b8a6
  BackgroundColor<<write>> #dcfce7
  BorderColor<<write>> #16a34a
  BackgroundColor<<navigate>> #ede9fe
  BorderColor<<navigate>> #7c3aed
  BackgroundColor<<classify>> #ccfbf1
  BorderColor<<classify>> #14b8a6
  BackgroundColor<<map>> #dcfce7
  BorderColor<<map>> #16a34a
  BackgroundColor<<fill>> #ede9fe
  BorderColor<<fill>> #7c3aed
  BackgroundColor<<diff>> #f1f5f9
  BorderColor<<diff>> #64748b
  BackgroundColor<<detect>> #fee2e2
  BorderColor<<detect>> #ef4444
  BackgroundColor<<function>> #bbf7d0
  BorderColor<<function>> #22c55e
  BackgroundColor<<view>> #bae6fd
  BorderColor<<view>> #0ea5e9
}


[*]--> TsX_Main : UserCommand == "Yeni Trafik"
[*] -->ProcessData : UserData

state ProcessData <<input>> {
  ProcessData : Input: jpgDownload/*.jpg
  ProcessData : Behavior: Ts1_Processing
  ProcessData : Output: userDataJson, jpg2json/<base>,json

  [*] --> DownloadJpg : Start

  state DownloadJpg <<function>> {
    DownloadJpg : Input: react_ui (upload button)
    DownloadJpg : Behavior: saves file in to jpgDownload/*.jpg
    DownloadJpg : Output: jpgDownload/*.jpg
  }

  DownloadJpg --> LLMProcessData : jpgDownload/*.jpg

  state LLMProcessData <<function>> {
    LLMProcessData : Input: usjpgDownload/*.jpg
    LLMProcessData : Function: license_llm.license_llm_extractor.extract_vehicle_info_from_image()
    LLMProcessData : Function: license_llm.license_llm_agent
    LLMProcessData : Behavior: extract information from image and writes to Json file
    LLMProcessData : Output: userDataProcessed (memory), jpg2json/<base>.json
  }

  state ErrorManagerProcessData <<function>> {
    ErrorManagerProcessData : Input: userDataProcessed
    ErrorManagerProcessData : Behavior: Checkif json file is empty or filled
    ErrorManagerProcessData : Output: errorManagerProcessData
  }

  ErrorManagerProcessData --> [*] : completed userDataProcessed
  ErrorManagerProcessData --> [*] : empty userDataProcessed

  LLMProcessData --> ErrorManagerProcessData : userDataProcessed

  

}

ProcessData --> TsXErrorManager : errorManagerProcessData

state TsX_Main <<navigate>> {

  [*] --> CurrentPage : pageHtmlUserCommand
  [*] --> HomePage : UserCommand

  state CurrentPage <<input>> {
    CurrentPage : Input: iframe 
    CurrentPage : Behavior: extract iframe content (NoLLM)
    CurrentPage : Output: pageHtml
  }

  CurrentPageSelector --> FindHomePage : pageHtml

  state FindHomePage <<navigate>> {
    

    

    FindHomePage : Input: pageHtml
    FindHomePage : Behavior: check side button menu is exist (NoLLM)
    FindHomePage : Output: homePageHtml, errHomePage 
      
    


    [*] --> CheckSideMenuButton : Start

    state CheckSideMenuButton <<function>> {
      CheckSideMenuButton : Input: pageHtml
      CheckSideMenuButton : Behavior: check if side button menu is visible (NoLLM)
      CheckSideMenuButton : Output: yes / no
    }

    CheckSideMenuButton --> [*] : yes
    CheckSideMenuButton --> CheckHomePage : no

    state CheckHomePage <<function>> {
      CheckHomePage : Input: pageHtml
      CheckHomePage : Behavior: check if HomePage button is visible (NoLLM)
      CheckHomePage : Output: yes / no
    }

    CheckHomePage --> WriteMappingHomePage : yes 
    CheckHomePage --> LLMCheckHomePage : no 

    state WriteMappingHomePage <<function>> {
      WriteMappingHomePage : Input: pageHtml
      WriteMappingHomePage : Behavior: Writes mapping json file to go button "Home Page"
      WriteMappingHomePage : There can be more than 1 Button "HomePage"
      WriteMappingHomePage : homePageMappingsJson
    }

    WriteMappingHomePage --> TryAllHomePageMapping : homePageMappingsJson

    state TryAllHomePageMapping <<function>> {
      TryAllHomePageMapping : Input: pageHtml, homePageMappingsJson
      TryAllHomePageMapping : Behavior: try all possible mappings until you reach "Home Page"
      TryAllHomePageMapping : Output: at HomePage

      [*] --> GoMappingHomePage : jsonSet

      state GoMappingHomePage <<function>> {
        GoMappingHomePage : Input: pageHtml, homePageMappingsJson, triesCounter
        GoMappingHomePage : Behavior: try each mapping in homePageMappingsJson until triesCounter reaches 3
        GoMappingHomePage : Becasue total can be 3 different json files
        GoMappingHomePage : Output: newPageHtml
      }

      GoMappingHomePage --> CheckPageChangedHomePage 

      state CheckPageChangedHomePage <<function>> {
        CheckPageChangedHomePage : Input: pageHtml, newPageHtml
        CheckPageChangedHomePage : Behavior: check if page has changed (NoLLM)
        CheckPageChangedHomePage : Output: yes / no
      }

      CheckPageChangedHomePage --> ResetMemoryHomePage : yes
      CheckPageChangedHomePage --> GoMappingHomePage : no : triesCounter++


      state ResetMemoryHomePage <<function>> {
        ResetMemoryHomePage : Input: pageHtml, newPageHtml
        ResetMemoryHomePage : Behavior: pageHtml==newPageHtml
        ResetMemoryHomePage : Output: pageHtml
      }

      GoMappingHomePage --> MaxAttemptReached : triesCounter==0
      state MaxAttemptReached <<function>> {
        MaxAttemptReached : Input: triesCounter
        MaxAttemptReached : Behavior: triesCounter >= 3 LLM needs to check
        MaxAttemptReached : Output: ErrorManagerFindHomePage
      }

      MaxAttemptReached --> [*] : ErrorManagerFindHomePage
      ResetMemoryHomePage --> [*] : CheckSideMenuButton
    }

    TryAllHomePageMapping --> ErrorManagerFindHomePage : countFindHomePage
    TryAllHomePageMapping --> CheckSideMenuButton :pageHtml

    state ErrorManagerFindHomePage <<function>> {
      ErrorManagerFindHomePage : Input: countFindHomePage
      ErrorManagerFindHomePage : Behavior: counts countFindHomePage
      ErrorManagerFindHomePage : If countFindHomePage >= 3 than gives ErrorManagerFindHomePage
      ErrorManagerFindHomePage : It increments countFindHomePage
      ErrorManagerFindHomePage : Output: errorResolved / errorUnresolved
    }

    ErrorManagerFindHomePage --> LLMCheckHomePage : countFindHomePage++
    ErrorManagerFindHomePage --> [*] : ErrorManagerFindHomePage

    state LLMCheckHomePage <<function>> {
      LLMCheckHomePage : Input: pageHtml
      LLMCheckHomePage : Behavior: LLM analyzes page content for HomePage elements
      LLMCheckHomePage : Output: homePageMappingJson
    }

    LLMCheckHomePage -->TryAllHomePageMapping : homePageMappingJson
  }

  FindHomePage --> HomePage : pageHtml
  FindHomePage --> TsXErrorManager : errorFindHomePage

  state HomePage <<view>> {
    HomePage : Input: pageHtml, UserCommand
    HomePage : Behavior: displays the Home Page
    HomePage : Output: UserTaskPage

    [*] --> WriteMappingSideMenu :pageHtml

    state WriteMappingSideMenu <<function>> {
      WriteMappingSideMenu : Input: pageHtml
      WriteMappingSideMenu : Behavior: Writes mapping json file to go button "Side Menu"
      WriteMappingSideMenu : There is only one side menu button
      WriteMappingSideMenu : sideMenuMappingsJson
    }

    WriteMappingSideMenu --> OpenSideMenu : sideMenuMappingsJson
    state OpenSideMenu <<function>> {
      OpenSideMenu : Input: pageHtml, sideMenuMappingsJson
      OpenSideMenu : Behavior: Opens the side menu via Ts3 Action
      OpenSideMenu : Saves new html from opened page as newPageHtml
      OpenSideMenu : Output: newPageHtml
    }

    OpenSideMenu --> CheckPageChangeSideMenu : newPageHtml

    state CheckPageChangeSideMenu <<function>> {
      CheckPageChangeSideMenu : Input: pageHtml, newPageHtml
      CheckPageChangeSideMenu : Behavior: check if page has changed (NoLLM)
      CheckPageChangeSideMenu : Output: yes / no
    }

    CheckPageChangeSideMenu --> ErrorManagerSideMenuPage : no
    CheckPageChangeSideMenu --> ResetMemoryHomeSideMenuPage : yes

    ErrorManagerSideMenuPage --> LLMCheckSideMenu : countSideMenuPage++
    ErrorManagerSideMenuPage --> [*] : ErrorManagerSideMenuPage

    state LLMCheckSideMenu <<function>> {
      LLMCheckSideMenu : Input: newPageHtml
      LLMCheckSideMenu : Behavior: LLM analyzes pageHtml for Side Menu elements
      LLMCheckSideMenu : Output: sideMenuMappingJson
    }

    LLMCheckSideMenu --> OpenSideMenu : sideMenuMappingJson
    state ErrorManagerSideMenuPage <<error>> {
      ErrorManagerSideMenuPage : Input: countSideMenuPage
      ErrorManagerSideMenuPage : Behavior: counts countSideMenuPage
      ErrorManagerSideMenuPage : If countSideMenuPage >= 3 than gives ErrorManagerSideMenuPage
      ErrorManagerSideMenuPage : It increments countSideMenuPage
      ErrorManagerSideMenuPage : Output: errorResolved / errorUnresolved
    }

    state ResetMemoryHomeSideMenuPage <<function>> {
      ResetMemoryHomeSideMenuPage : Input: pageHtml,newPageHtml
      ResetMemoryHomeSideMenuPage : Behavior: pageHtml == newPageHtml
      ResetMemoryHomeSideMenuPage : countSideMenuPage = 0
      ResetMemoryHomeSideMenuPage : Output: pageHtml
    }

    ResetMemoryHomeSideMenuPage --> WriteMappingUserTaskPage : pageHtml

    state WriteMappingUserTaskPage <<function>> {
      WriteMappingUserTaskPage : Input: pageHtml,UserCommand
      WriteMappingUserTaskPage : Behavior: Writes mapping json file to go button "User Task"
      WriteMappingUserTaskPage : There is only one user task button
      WriteMappingUserTaskPage : Output : userTaskMappingsJson
    }

    WriteMappingUserTaskPage --> OpenUserTaskPage : userTaskMappingsJson
    
    state OpenUserTaskPage <<function>> {
      OpenUserTaskPage : Input: userTaskMappingsJson
      OpenUserTaskPage : Behavior: Navigates to User Task Page with mappings using Ts3 action
      OpenUserTaskPage : Output: userTaskPageHtml
    }

    OpenUserTaskPage --> CheckPageChangeToUserCommandPage : userTaskPageHtml

    state CheckPageChangeToUserCommandPage <<function>> {
      CheckPageChangeToUserCommandPage : Input: newPageHtml
      CheckPageChangeToUserCommandPage : Behavior: checks if the page has changed (NoLLM)
      CheckPageChangeToUserCommandPage : Output: yes / no
    }

    CheckPageChangeToUserCommandPage --> ErrorManagerSideMenu2UserTaskPage : no, countSideMenu2UserTaskPage
    CheckPageChangeToUserCommandPage --> ResetMemoryUserTaskPage : yes

    state ErrorManagerSideMenu2UserTaskPage <<error>> {
      ErrorManagerSideMenu2UserTaskPage : Input: countSideMenu2UserTaskPage
      ErrorManagerSideMenu2UserTaskPage : Behavior: counts countSideMenu2UserTaskPage
      ErrorManagerSideMenu2UserTaskPage : If countSideMenu2UserTaskPage >= 3 than gives ErrorManagerSideMenu2UserTaskPage
      ErrorManagerSideMenu2UserTaskPage : It increments countSideMenu2UserTaskPage
      ErrorManagerSideMenu2UserTaskPage : Output: errorResolved / errorUnresolved
    }

    ErrorManagerSideMenu2UserTaskPage --> [*] : ErrorManagerSideMenu2UserTaskPage
    ErrorManagerSideMenu2UserTaskPage --> LLMCheckUserTaskPage : countSideMenu2UserTaskPage++
    
    state LLMCheckUserTaskPage <<function>> {
      LLMCheckUserTaskPage : Input: userTaskPageHtml
      LLMCheckUserTaskPage : Behavior: LLM analyzes userTaskPageHtml for User Task elements
      LLMCheckUserTaskPage : Output: userTaskMappingJson
    }

    LLMCheckUserTaskPage --> OpenUserTaskPage : userTaskMappingJson


    state ResetMemoryUserTaskPage <<function>> {
    ResetMemoryUserTaskPage : Input: userTaskPageHtml
    ResetMemoryUserTaskPage : Behavior: userTaskPageHtml == newUserTaskPageHtml
    ResetMemoryUserTaskPage : countSideMenu2UserTaskPage = 0
    ResetMemoryUserTaskPage : Output: userTaskPageHtml
    }
    ResetMemoryUserTaskPage --> [*] : userTaskPageHtml

  }

  HomePage --> TsXErrorManager : ErrorManagerSideMenu2UserTaskPage
  HomePage --> TsXErrorManager : errorManagerSideMenuPage
  HomePage --> UserTaskPage : userTaskPageHtml
  ProcessData --> UserTaskPage : userDataProcessed

  state UserTaskPage <<view>> {
      UserTaskPage : Input: userTaskPageHtml
      UserTaskPage : Behavior: processes userTaskPageHtml
      UserTaskPage : Output: pdfReady

      [*] --> CaptureUserTaskPageHtml : userTaskPageHtml
      [*] --> WriteMappingUserData2Html : userDataProcessed

      state ErrorUserTaskPageHtml <<error>> {
          ErrorUserTaskPageHtml : Input: errorUserTaskPageHtml, errorLogUserTaskPageHtml
          ErrorUserTaskPageHtml : Behavior: handles errors in userTaskPageHtml
          ErrorUserTaskPageHtml : Output: errorResolved / errorUnresolved
      }

      ErrorUserTaskPageHtml --> [*] : errorUserTaskPageHtml, errorLogUserTaskPageHtml

      state CaptureUserTaskPageHtml <<function>> {
          CaptureUserTaskPageHtml : Input: userTaskPageHtml
          CaptureUserTaskPageHtml : Behavior: captures HTML from userTaskPageHtml (TsW_Capture)
          CaptureUserTaskPageHtml : Function: webbot.test_webbot_html_mapping.readWebPage()
          CaptureUserTaskPageHtml : Output: memory.html,webbot2html/page.html, errorUserTaskPageHtml
      }

      CaptureUserTaskPageHtml --> ErrorUserTaskPageHtml : errorUserTaskPageHtml, errorLogUserTaskPageHtml
      CaptureUserTaskPageHtml --> WriteMappingUserData2Html : memory.html,webbot2html/page.html

      state WriteMappingUserData2Html <<function>> {
          WriteMappingUserData2Html : Input: memory.html,userDataProcessed (oldname ruhsat_json)
          WriteMappingUserData2Html : Behavior: Check what information you have from userDataProcessed json file
          WriteMappingUserData2Html : match with the memory.html (forms spaces) and creates mapping file (Ts2L_Map)
          WriteMappingUserData2Html : It als finds action button after Ts3 fill all the forms need to go next page
          WriteMappingUserData2Html : If there is no form to be filled, then it means you are in the last page
          WriteMappingUserData2Html : then it should be in last stage and needs to map action to "policeyi olustur"
          WriteMappingUserData2Html : Function: license_llm.pageread_llm.map_json_to_html_fields()
          WriteMappingUserData2Html : Output: userTaskMatchFormsMappingJson ,lastStep(boolean) , json2mapping/<base>_mapping.json 
          WriteMappingUserData2Html : Memory : mapping (object in memory_store)
      }

      WriteMappingUserData2Html --> CheckMappingUserData2Html : userTaskMatchFormsMappingJson, lastStep==false
      WriteMappingUserData2Html --> FillFormsAndAction : userTaskMatchFormsMappingJson, lastStep==true
      

      state CheckMappingUserData2Html <<function>> {
          CheckMappingUserData2Html : Input: userTaskMatchFormsMappingJson, userTaskPageHtml
          CheckMappingUserData2Html : Behavior: checks if the userTaskMatchFormsMappingJson form parts are empty
          CheckMappingUserData2Html : Output: mappingValid / mappingInvalid
      }

      CheckMappingUserData2Html --> FillFormsAndAction :mappingValid, userTaskMatchFormsMappingJson, countMappingUserData==0
      CheckMappingUserData2Html --> ErrorManagerMappingUserData2Html :mappingInvalid, countMappingUserData

      state ErrorManagerMappingUserData2Html <<error>> {
          ErrorManagerMappingUserData2Html : Input: countMappingUserData, errorLogWriteMappingUserData2Html, errorLogChangePromptSlightly
          ErrorManagerMappingUserData2Html: If countMappingUserData>= 3 than gives error ErrorManagerMappingUserData2Html
          ErrorManagerMappingUserData2Html :It increments countMappingUserData
          ErrorManagerMappingUserData2Html : Output: errorManagerMappingUserData2Html,countMappingUserData
      }

      note right of ErrorManagerMappingUserData2Html
        Data received from WriteMappingUserData2Html:
        - errorLogWriteMappingUserData2Html
        - errorLogChangePromptSlightly
      end note

      ErrorManagerMappingUserData2Html --> ChangePromptSlightly : countMappingUserData++

      state ChangePromptSlightly <<function>> {
          ChangePromptSlightly : Input: userTaskMatchFormsMappingJson, memory.html
          ChangePromptSlightly : Behavior: different prompt of WriteMappingUserData2Html
          ChangePromptSlightly: same attributes as WriteMappingUserData2Html but in different technic could be
          ChangePromptSlightly: it will implemented later. For now copy and paste WriteMappingUserData2Html (Ts2L_Map)
          ChangePromptSlightly : Output: userTaskMatchFormsMappingJson
      }

      ChangePromptSlightly --> CheckMappingUserData2Html : userTaskMatchFormsMappingJson
      
      state FillFormsAndAction <<function>> {
          FillFormsAndAction : Input: userTaskMatchFormsMappingJson, userTaskPageHtml
          FillFormsAndAction : Behavior: fills forms in the HTML using userTaskMatchFormsMappingJson
          FillFormsAndAction : No LLM is needed. 
          FillFormsAndAction : Function: react_ui in-page filler
          FillFormsAndAction : Output: newUserTaskPageHtml
          FillFormsAndAction : Endpoint: /api/ts3/generate-script
      }

      FillFormsAndAction --> CheckPageChangedUserTaskPage : newUserTaskPageHtml

      state CheckPageChangedUserTaskPage <<function>> {
          CheckPageChangedUserTaskPage : Input: newUserTaskPageHtml,userTaskPageHtml
          CheckPageChangedUserTaskPage : Behavior: compare newUserTaskPageHtml with userTaskPageHtml
          CheckPageChangedUserTaskPage : Output: pageChanged / pageUnchanged
      }

      CheckPageChangedUserTaskPage --> ErrorManagerUserTaskPageNoChange : countChangedUserTaskPage

      CheckPageChangedUserTaskPage --> ResetUrlUserTaskPage : pageUnchanged, countChangedUserTaskPage ==0
      ResetUrlUserTaskPage --> CheckPdfReady : userTaskPageHtml

      state ResetUrlUserTaskPage <<function>> {
          ResetUrlUserTaskPage : Input: newUserTaskPageHtml
          ResetUrlUserTaskPage : Behavior: userTaskPageHtml = newUserTaskPageHtml
          ResetUrlUserTaskPage : Output: userTaskPageHtml
      }

      state ErrorManagerUserTaskPageNoChange <<error>> {
          ErrorManagerUserTaskPageNoChange : Input: countChangedUserTaskPage
          ErrorManagerUserTaskPageNoChange: If countChangedUserTaskPage>= 3 than gives error ErrorManagerUserTaskPageNoChange
          ErrorManagerUserTaskPageNoChange :It increments countChangedUserTaskPage
          ErrorManagerUserTaskPageNoChange : Behavior: handles errors when no change is detected
          ErrorManagerUserTaskPageNoChange : Output: errorManagerUserTaskPageNoChange / countChangedUserTaskPage
      }
      note left of ErrorManagerUserTaskPageNoChange
        Data received from FillFormsAndAction:
        - errorLogFillFormsAndAction
      end note

      ErrorManagerUserTaskPageNoChange --> ChangePromptSlightly

      state CheckPdfReady <<function>> {
          CheckPdfReady : Input: newUserTaskPageHtml
          CheckPdfReady : Behavior: checks if the PDF is ready for download
          CheckPdfReady : Output: pdfReady / pdfNotReady
      }

      CheckPdfReady --> [*] : pdfReady
      CheckPdfReady --> ControllerUserTaskPage : pdfNotReady,countUserTaskPage

      state ControllerUserTaskPage <<function>> {
          ControllerUserTaskPage : Input: userTaskPageHtml
          ControllerUserTaskPage : Behavior: controls the user task page
          ControllerUserTaskPage : countUserTaskPage >= 5 (max could be 5 page)
          ControllerUserTaskPage :if countUserTaskPage>5 then should errorControllerUserTaskPage == true
          ControllerUserTaskPage :(after 5 page should be "police olustur")
          ControllerUserTaskPage : Output: userTaskPageHtml
      }
      ControllerUserTaskPage --> WriteMappingUserData2Html : errorControllerUserTaskPage=false, countUserTaskPage++
      ControllerUserTaskPage --> ErrorControllerUserTaskPage : errorControllerUserTaskPage=true

      state ErrorControllerUserTaskPage <<error>> {
          ErrorControllerUserTaskPage : Input: errorControllerUserTaskPage
          ErrorControllerUserTaskPage : Behavior: handles errors specific to the controller
          ErrorControllerUserTaskPage : later could be improved to process more error logs
          ErrorControllerUserTaskPage : Output: errorControllerUserTaskPage
      }
      ErrorControllerUserTaskPage --> [*] : errorControllerUserTaskPage

      
      UserTaskPage --> ResetUserTaskage : errorControllerUserTaskPage
  }

  UserTaskPage --> TsXErrorManager
  UserTaskPage --> ResetUserTaskPage : userTaskPageHtml, countResetUserTaskPage

  state ResetUserTaskPage <<function>> {
      ResetUserTaskPage : Input: userTaskPageHtml,countResetUserTaskPage
      ResetUserTaskPage : Behavior: If countResetUserTaskPage > 2 then errorResetUserTaskPage = true
      ResetUserTaskPage : Output: userTaskPageHtml,errorResetUserTaskPage
  }

  ResetUserTaskPage --> CurrentPageSelector :userTaskPageHtml
  CurrentPage --> CurrentPageSelector : pageHtmlUserCommand

  state CurrentPageSelector <<function>> {
      CurrentPageSelector : Input: countResetUserTaskPage,userTaskPageHtml,pageHtml
      CurrentPageSelector : Behavior: 
      CurrentPageSelector : Output: pageHtml
  }

  state TsXErrorManager <<error>> {
      TsXErrorManager : Input: errorContext
      TsXErrorManager : Behavior: handles errors specific to TSX
      TsXErrorManager : Output: errorResolved / errorUnresolved
  }


  

  

}




@enduml
